//------------------------------------------------------------------------------
// JenkinsFile
//------------------------------------------------------------------------------
// Build Constant
def CONST_BUILD_TEMPLATE_PATH = "build-template"
def CONST_REPORT_DIRECTORY_PATH = "target/site"
def CONST_ARCHIVE_REPORTS_DIRECTORY_PATH = "target/report"
def CONST_ENVIRONMENT_DEPENDENT_CONFIG = "environment_dependent_config"
def CONST_AWS_ECS_CONFIG = "aws_ecs_config"

// Build Variable
def artifactId
def build_environment
def aws_account
def buildConfig
def git_repository_name

pipeline {
    agent any
    tools { 
        jdk 'openjdk-1.8.0'
        maven 'maven3.5.2'
    }
    stages {
        stage('init') {
            steps {
                script {
                    git_repository_name = sh (script:"echo -n ${env.GIT_URL} | sed -e 's|^.*/\\(.\\+\\)\\.git\$|\\1|g'", returnStdout: true)
                    aws_account = sh (script:"aws sts get-caller-identity | jq -r '.Account'", returnStdout: true).trim()
                    buildConfig = readJSON file: "${WORKSPACE}/${CONST_BUILD_TEMPLATE_PATH}/config.json"
                    build_environment = buildConfig[CONST_ENVIRONMENT_DEPENDENT_CONFIG][aws_account].build_environment
                    artifactId = buildConfig[CONST_AWS_ECS_CONFIG][git_repository_name].artifactid
                }
            }
        }
        stage('Unittest') {
            steps {
                script {
                    dir("${WORKSPACE}") {
                        // unit test
                        sh "rm -rf ./.repository"
                        sh "mvn -f pom.xml -s ${CONST_BUILD_TEMPLATE_PATH}/${build_environment}/setting.xml clean jacoco:prepare-agent jxr:jxr checkstyle:checkstyle findbugs:findbugs test jacoco:report site -Dmaven.repo.local=./.repository"

                        // make report zip files
                        sh "mkdir -p target/report"
                        findFiles(glob: '**/site/index.html').collect{(it.path =~ /^([^\/]*)\/?target\/site\//)[0][1]}.each {
                            local fromCopyDirName = ""
                            local toCopyDirName = ""
                            if ( it == '' ) {
                                fromCopyDirName = ""
                                toCopyDirName = "${artifactId}-parent"
                            } else {
                                fromCopyDirName = it + "/"
                                toCopyDirName = it
                            }

                            // copy report directory
                            sh "cp -Rp ${fromCopyDirName}${CONST_REPORT_DIRECTORY_PATH} ${CONST_ARCHIVE_REPORTS_DIRECTORY_PATH}/${toCopyDirName}"

                            // archive report directory to zip
                            zip zipFile:"${CONST_ARCHIVE_REPORTS_DIRECTORY_PATH}/${toCopyDirName}.zip", dir:"${CONST_ARCHIVE_REPORTS_DIRECTORY_PATH}/${toCopyDirName}", archive: true
                        }

                        // archive report
                        archiveArtifacts("${CONST_ARCHIVE_REPORTS_DIRECTORY_PATH}/*.zip")
                    }
                }
            }
        }
    }
}
