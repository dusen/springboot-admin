<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.fastretailing.dcp.sales.common.repository.optional.SettlementCorrectionHistoryOptionalMapper">
	<resultMap id="BaseResultMap"
		type="com.fastretailing.dcp.sales.common.entity.optional.SettlementCorrectionHistoryOptional">
		<!-- WARNING - @mbg.generated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		<id column="system_brand_code" jdbcType="VARCHAR" property="systemBrandCode" />
		<id column="system_country_code" jdbcType="VARCHAR" property="systemCountryCode" />
		<id column="store_code" jdbcType="VARCHAR" property="storeCode" />
		<result column="payoff_date" jdbcType="VARCHAR" property="payoffDate" />
		<result column="payoff_type_code" jdbcType="VARCHAR" property="payoffTypeCode" />
		<result column="payoff_type_name" jdbcType="VARCHAR" property="payoffTypeName" />
		<result column="payoff_type_sub_number_code" jdbcType="VARCHAR" property="payoffTypeSubNumberCode" />
		<result column="payoff_type_sub_number_name" jdbcType="VARCHAR" property="payoffTypeSubNumberName" />
		<result column="cash_register_no" jdbcType="NUMERIC" property="cashRegisterNo" />
		<result column="cash_register_not" jdbcType="NUMERIC" property="cashRegisterNo" />
		<result column="amount_before" jdbcType="NUMERIC" property="payoffAmountBefore" />
		<result column="amount_after" jdbcType="NUMERIC" property="payoffAmountAfter" />
		<result column="quantity_before" jdbcType="NUMERIC" property="payoffQuantityBefore" />
		<result column="quantity_after" jdbcType="NUMERIC" property="payoffQuantityAfter" />
		<result column="update_user_id" jdbcType="VARCHAR" property="updateUserId" />
		<result column="update_datetime" jdbcType="TIMESTAMP" property="updateDateTime" />
	</resultMap>
	<select id="selectSettlementCorrectionHistoryListByCondition"
		parameterType="com.fastretailing.dcp.sales.common.entity.optional.SettlementCorrectionHistoryOptionalCondition"
		resultMap="BaseResultMap">
		select /* SettlementCorrectionHistoryOptionalMapper-001 */
			tp.payoff_date,
			tp.payoff_type_code,
			tc.payoff_type_name,
			tp.payoff_type_sub_number_code,
			tc.payoff_type_sub_number_name,
			tp.cash_register_no,
			tc.amount_before,
			tc.amount_after,
			tc.quantity_before,
			tc.quantity_after,
			tc.update_user_id,
			tc.update_datetime
		from (
			select
				max(correction_history_sub_number)
				correction_history_sub_number,
				payoff_date,
				payoff_type_code,
				payoff_type_sub_number_code,
				cash_register_no
			from (
				select 
					system_brand_code,
					system_country_code,
					store_code,
					correction_history_sub_number,
					payoff_date,
					payoff_type_code,
					payoff_type_sub_number_code,
					cash_register_no
				from
					t_alteration_history_pay_off_data
				where
					system_brand_code=#{systemBrandCode}
					and
					system_country_code=#{systemCountryCode}
					and store_code=#{storeCode}
					<if test="payoffDateFrom != null">
			                   <![CDATA[
			                  	and payoff_date >= #{payoffDateFrom}
			                   ]]>
					</if>
					<if test="payoffDateTo != null">
			                  <![CDATA[
			                  	and payoff_date <= #{payoffDateTo}
			                  ]]>
					</if>
					<if test="cashRegisterNo != null">
						and cash_register_no = #{cashRegisterNo}
					</if>
					<if test="corrector != null and corrector != ''">
						and update_user_id = #{corrector}
					</if>
					<if test="correctionDateFrom != null">
			                   <![CDATA[
			                  	and update_datetime >= #{correctionDateFrom}
			                   ]]>
					</if>
					<if test="correctionDateTo != null">
			                  <![CDATA[
			                 	 and update_datetime <= #{correctionDateTo}
			                  ]]>
					</if>	
					) tn
			group by
				system_brand_code,
				system_country_code,
				store_code,
				payoff_date,
				payoff_type_code,
				payoff_type_sub_number_code,
				cash_register_no
			) tp,(
		select
			t0.correction_history_sub_number correction_history_sub_number,
			t0.payoff_date payoff_date,
			t0.payoff_type_code payoff_type_code,
			t0.payoff_type_sub_number_code payoff_type_sub_number_code,
			t0.cash_register_no cash_register_no,
			t0.payoff_type_name,
			t0.payoff_type_sub_number_name,
			t0.update_user_id,
			t0.update_datetime,
			t0.payoff_amount amount_before,
			t1.payoff_amount amount_after,
			t0.payoff_quantity quantity_before,
			t1.payoff_quantity quantity_after
		from (
			select
				correction_history_sub_number,
				payoff_date,
				payoff_type_code,
				payoff_type_sub_number_code,
				cash_register_no,
				payoff_amount,
				payoff_quantity,
				payoff_type_name,
				payoff_type_sub_number_name,
				update_user_id,update_datetime
			from
				t_alteration_history_pay_off_data
			where
				history_type = 0
				and system_brand_code=#{systemBrandCode}
				and system_country_code=#{systemCountryCode}
				and store_code=#{storeCode}
				<if test="payoffDateFrom != null">
	                   <![CDATA[
	                  	and payoff_date >= #{payoffDateFrom}
	                   ]]>
				</if>
				<if test="payoffDateTo != null">
	                  <![CDATA[
	                  	and payoff_date <= #{payoffDateTo}
	                  ]]>
				</if>
				<if test="cashRegisterNo != null">
					and cash_register_no = #{cashRegisterNo}
				</if>
				<if test="corrector != null and corrector != ''">
					and update_user_id = #{corrector}
				</if>
				<if test="correctionDateFrom != null">
	                   <![CDATA[
	                  	and update_datetime >= #{correctionDateFrom}
	                   ]]>
				</if>
				<if test="correctionDateTo != null">
	                  <![CDATA[
	                 	 and update_datetime <= #{correctionDateTo}
	                  ]]>
				</if>
			) t0,(
			select
				correction_history_sub_number,
				payoff_date,
				payoff_type_code,
				payoff_type_sub_number_code,
				cash_register_no,
				payoff_amount,
				payoff_quantity
			from
				t_alteration_history_pay_off_data
			where
				history_type = 1
				and system_brand_code=#{systemBrandCode}
				and system_country_code=#{systemCountryCode}
				and store_code=#{storeCode}
				<if test="payoffDateFrom != null">
	                   <![CDATA[
	                  	and payoff_date >= #{payoffDateFrom}
	                   ]]>
				</if>
				<if test="payoffDateTo != null">
	                  <![CDATA[
	                  	and payoff_date <= #{payoffDateTo}
	                  ]]>
				</if>
				<if test="cashRegisterNo != null">
					and cash_register_no = #{cashRegisterNo}
				</if>
				<if test="corrector != null and corrector != ''">
					and update_user_id = #{corrector}
				</if>
				<if test="correctionDateFrom != null">
	                   <![CDATA[
	                  	and update_datetime >= #{correctionDateFrom}
	                   ]]>
				</if>
				<if test="correctionDateTo != null">
	                  <![CDATA[
	                 	 and update_datetime <= #{correctionDateTo}
	                  ]]>
				</if>
			) t1
			where
				t0.payoff_date = t1.payoff_date
				and t0.payoff_type_code =t1.payoff_type_code
				and t0.payoff_type_sub_number_code =t1.payoff_type_sub_number_code
				and t0.cash_register_no =t1.cash_register_no
				and t0.correction_history_sub_number =t1.correction_history_sub_number
		) tc
		where
			tp.correction_history_sub_number = tc. correction_history_sub_number
			and tp.payoff_date =tc.payoff_date
			and tp.payoff_type_code =tc.payoff_type_code
			and tp.payoff_type_sub_number_code =tc.payoff_type_sub_number_code
			and tp.cash_register_no =tc.cash_register_no
		order by
			tp.payoff_date,
			tp.cash_register_no,
			tp.payoff_type_code,
			tp.payoff_type_sub_number_code
	</select>

	<select id="selectStoreCodeAndNameByViewStoreCode" resultMap="BaseResultMap">
		select /* SettlementCorrectionHistoryOptionalMapper-002 */
			store_code,
			store_name
		from
			m_trans_store_code
		where
			view_store_code = #{viewStoreCode }
	</select>

</mapper>